name: Deploy to HostGator with Quality Checks

# Executa o deploy quando há push na branch main
on:
  push:
    branches: [ main, master ]

  # Permite execução manual do workflow
  workflow_dispatch:

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Quality Checks

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --only=dev || npm install

    - name: Basic validation checks
      run: |
        echo "🔍 Executando verificações básicas..."

        # Verificar se arquivos essenciais existem
        echo "📁 Verificando arquivos essenciais..."
        [ -f "index.html" ] && echo "✅ index.html encontrado" || echo "❌ index.html não encontrado"
        [ -f "admin.html" ] && echo "✅ admin.html encontrado" || echo "❌ admin.html não encontrado"
        [ -f "assets/css/style.css" ] && echo "✅ CSS principal encontrado" || echo "❌ CSS principal não encontrado"
        [ -f "assets/js/script.js" ] && echo "✅ JS principal encontrado" || echo "❌ JS principal não encontrado"
        [ -f "manifest.json" ] && echo "✅ Manifest PWA encontrado" || echo "❌ Manifest PWA não encontrado"
        [ -f "sw.js" ] && echo "✅ Service Worker encontrado" || echo "❌ Service Worker não encontrado"

        # Verificar estrutura HTML básica
        echo "📄 Verificando estrutura HTML..."
        grep -q "<!DOCTYPE html>" index.html && echo "✅ DOCTYPE correto" || echo "❌ DOCTYPE incorreto"
        grep -q 'lang="pt-BR"' index.html && echo "✅ Idioma definido" || echo "❌ Idioma não definido"
        grep -q 'name="viewport"' index.html && echo "✅ Viewport definido" || echo "❌ Viewport não definido"
        grep -q 'name="description"' index.html && echo "✅ Meta description encontrada" || echo "❌ Meta description não encontrada"

        # Verificar links importantes
        echo "🔗 Verificando links..."
        grep -q "wa.me/554284099552" index.html && echo "✅ WhatsApp link correto" || echo "❌ WhatsApp link incorreto"

        # Verificar PWA
        echo "📱 Verificando PWA..."
        grep -q 'rel="manifest"' index.html && echo "✅ Manifest linkado" || echo "❌ Manifest não linkado"

    - name: Run linting (optional)
      run: |
        echo "🔍 Executando linting..."
        npm run lint:html || echo "⚠️ HTML linting completed with warnings"
        npm run lint:css || echo "⚠️ CSS linting completed with warnings"
        npm run lint:js || echo "⚠️ JS linting completed with warnings"

    - name: Check file sizes
      run: |
        echo "📏 Verificando tamanhos de arquivo..."
        find . -name "*.js" -exec wc -c {} + | awk '$1 > 100000 {print "⚠️  Large JS file: " $2 " (" $1 " bytes)"}'
        find . -name "*.css" -exec wc -c {} + | awk '$1 > 50000 {print "⚠️  Large CSS file: " $2 " (" $1 " bytes)"}'
        find . -name "*.jpg" -o -name "*.png" -o -name "*.gif" | xargs -I {} sh -c 'size=$(wc -c < "{}"); if [ $size -gt 500000 ]; then echo "⚠️  Large image: {} ($size bytes)"; fi'

    - name: Security scan
      run: |
        echo "🔒 Verificando segurança..."
        # Verificar se há credenciais expostas
        if grep -r "password\|secret\|key\|token" --include="*.js" --include="*.html" --include="*.css" .; then
          echo "⚠️  Possíveis credenciais encontradas no código"
        fi

        # Verificar headers de segurança no .htaccess
        if [ -f ".htaccess" ]; then
          if grep -q "X-Frame-Options\|Content-Security-Policy\|X-Content-Type-Options" .htaccess; then
            echo "✅ Headers de segurança encontrados"
          else
            echo "⚠️  Headers de segurança não encontrados"
          fi
        fi

    - name: Performance check
      run: |
        echo "🚀 Verificando performance..."
        # Contar recursos externos
        external_resources=$(grep -r "https://" --include="*.html" --include="*.css" --include="*.js" . | wc -l)
        echo "📊 Recursos externos encontrados: $external_resources"

        if [ $external_resources -gt 10 ]; then
          echo "⚠️  Muitos recursos externos podem afetar a performance"
        fi
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: quality-checks
    if: success()

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Prepare deployment
      run: |
        echo "🚀 Preparando deploy..."

        # Criar arquivo de informações de build
        cat > build-info.json << EOF
        {
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit_hash": "${{ github.sha }}",
          "commit_message": "${{ github.event.head_commit.message }}",
          "branch": "${{ github.ref_name }}",
          "workflow_run": "${{ github.run_number }}"
        }
        EOF

        # Minificar CSS (básico)
        if command -v csso &> /dev/null; then
          echo "🎨 Minificando CSS..."
          for file in assets/css/*.css; do
            if [[ -f "$file" && ! "$file" =~ \.min\. ]]; then
              csso "$file" --output "${file%.css}.min.css"
            fi
          done
        fi

        # Otimizar HTML (remover comentários e espaços extras)
        echo "📄 Otimizando HTML..."
        sed -i 's/<!--.*-->//g' *.html
        sed -i '/^[[:space:]]*$/d' *.html

    - name: Deploy via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        protocol: ftps
        port: 21

        # Pasta local (raiz do repositório)
        local-dir: ./

        # Pasta remota no servidor (raiz)
        server-dir: /

        # Arquivos a serem excluídos do upload
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.env*
          **/README.md
          **/.github/**
          **/package*.json
          **/yarn.lock
          **/*.md
          **/tests/**
          **/.vscode/**
          **/.idea/**
          **/logs/**

        # Não limpar arquivos remotos
        dangerous-clean-slate: false

        # Verificar modificações antes do upload
        dry-run: false

        # Log detalhado
        log-level: verbose

    - name: Post-deployment verification
      run: |
        echo "🔍 Verificando deploy..."

        # Aguardar mais tempo para o deploy se propagar
        echo "⏳ Aguardando propagação do deploy (60 segundos)..."
        sleep 60

        # Função para verificar URL com retry
        check_url() {
          local url=$1
          local name=$2
          local max_attempts=5
          local attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "🔄 Tentativa $attempt/$max_attempts para $name..."

            if curl -f -s -L --max-time 10 "$url" > /dev/null 2>&1; then
              echo "✅ $name está acessível"
              return 0
            fi

            if [ $attempt -lt $max_attempts ]; then
              echo "⏳ Aguardando 15 segundos antes da próxima tentativa..."
              sleep 15
            fi

            attempt=$((attempt + 1))
          done

          echo "⚠️  $name não está acessível após $max_attempts tentativas"
          return 1
        }

        # Verificar se o site está acessível (tentar HTTPS primeiro, depois HTTP)
        if check_url "https://forgiariniparfum.dehor.dev/" "Site principal (HTTPS)"; then
          site_accessible=true
        elif check_url "http://forgiariniparfum.dehor.dev/" "Site principal (HTTP)"; then
          site_accessible=true
          echo "⚠️  Site acessível via HTTP, mas HTTPS pode ter problemas"
        else
          site_accessible=false
        fi

        # Verificar recursos apenas se o site estiver acessível
        if [ "$site_accessible" = true ]; then
          check_url "https://forgiariniparfum.dehor.dev/assets/css/style.css" "CSS principal" || true
          check_url "https://forgiariniparfum.dehor.dev/assets/js/script.js" "JavaScript principal" || true
          check_url "https://forgiariniparfum.dehor.dev/manifest.json" "PWA Manifest" || true
        fi

        # Verificar se pelo menos o domínio responde
        echo "🌐 Verificando conectividade do domínio..."
        if ping -c 3 forgiariniparfum.dehor.dev > /dev/null 2>&1; then
          echo "✅ Domínio está respondendo"
        else
          echo "⚠️  Domínio não está respondendo ao ping"
        fi

        # Não falhar o deploy se o site não estiver imediatamente acessível
        # Isso pode acontecer devido a cache do CDN ou propagação DNS
        if [ "$site_accessible" = false ]; then
          echo "⚠️  Site pode não estar imediatamente acessível devido a:"
          echo "   - Cache do CDN/Proxy"
          echo "   - Propagação DNS"
          echo "   - Configurações do servidor"
          echo "   - Aguarde alguns minutos e tente novamente"
          echo "🎯 Deploy dos arquivos foi concluído com sucesso!"
        fi

    - name: Notify deployment success
      run: |
        echo "🎉 Deploy concluído com sucesso!"
        echo "🌐 Site: https://forgiariniparfum.dehor.dev/"
        echo "📊 Commit: ${{ github.sha }}"
        echo "🕒 Horário: $(date)"
